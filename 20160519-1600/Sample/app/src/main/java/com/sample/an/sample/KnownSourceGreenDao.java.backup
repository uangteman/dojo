package com.sample.an.sample;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.internal.DaoConfig;
// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "NOTE".
 */
public class KnownSourceGreenDao extends AbstractDao<KnownSourceGreenModel, Long> {

    public static final String TABLENAME = "KNOWNSOURCEGREENMODEL";

//    private KnownSourceGreenDaoSession daoSession;


    public KnownSourceGreenDao(DaoConfig config) {
        super(config);
    }

    public KnownSourceGreenDao(DaoConfig config, KnownSourceGreenDaoSession daoSession) {
        super(config, daoSession);
//        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
//        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        String constraint = "IF NOT EXISTS ";
        String queryString = "CREATE TABLE " + constraint + "\"KNOWNSOURCEGREENMODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL);";
        db.execSQL(queryString);
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KNOWNSOURCEGREENMODEL\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, KnownSourceGreenModel entity) {
        stmt.clearBindings();

        long id = entity.getId();
        stmt.bindLong(1, id);
        stmt.bindString(2, entity.getName());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public KnownSourceGreenModel readEntity(Cursor cursor, int offset) {
        KnownSourceGreenModel entity = new KnownSourceGreenModel(
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1)); // name);
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, KnownSourceGreenModel entity, int offset) {

        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));}

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(KnownSourceGreenModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(KnownSourceGreenModel entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
